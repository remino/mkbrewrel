#!/usr/bin/env bash

VERSION='2.0.2'

mkbrewrel_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_MISSING_APP=17
	E_NO_TAG=18
	E_NO_RELEASE=19
	E_NOT_FOUND=20

	SCRIPT_INV="$(basename "$0")"
	SCRIPT_PATH="$(readlink -f "$0")"
	SCRIPT_NAME="$(basename "$SCRIPT_PATH")"
	SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

	SAMPLE=0

	[ -z "$MKBREWREL_LIB_DIR" ] && MKBREWREL_LIB_DIR="$SCRIPT_DIR/lib"
	[ -z "$license" ] && license="ISC"

	while getopts hst:v opt; do
		case $opt in
			h) CMD=help ;;
			s) SAMPLE=1 ;;
			t) TEMPLATE="$OPTARG" ;;
			v) CMD=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$((OPTIND - 1))"

	[ -z "$CMD" ] && CMD="process"

	case "$CMD" in
		help | process | version) "mkbrewrel_$CMD" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

mkbrewrel_help() {
	cat << USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_INV [<options>] [<tag>]

Create release on GitHub and generate Homebrew formula output to stdout.

Uses latest version tag by default (e.g. v1.2.3) or the one specified.

OPTIONS:

	-h             Show this help screen.
	-s             Use sample values for testing.
	-t <template>  Use a custom Mustache template file.
	-v             Show script name and version number.

USAGE
}

mkbrewrel_process() {
	if [ $SAMPLE -ne 0 ]; then
		class_name="Example"
		description="Sample description."
		homepage="https://example.com"
		name="example"
		sha256="abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
		url="https://example.com/example.tar.gz"
		version="1.2.3"
	else
		_require curl jq gh git

		tag="$1"
		[ -z "$tag" ] && tag="$(git tag | sort -V | tail -1)"
		[ -z "$tag" ] && _fatal $E_NO_TAG "No tag found."

		gh release create "$tag" --title "$tag" --generate-notes > /dev/null 2>&1
		result=$?
		[ $result -ne 0 ] && _fatal $E_NO_RELEASE "Failed to create release."

		description="$(gh repo view --json description | jq -r .description)"
		homepage="$(gh repo view --json url | jq -r .url)"
		name="$(gh repo view --json name | jq -r .name)"
		url="$(gh release view "$tag" --json tarballUrl | jq -r .tarballUrl)"
		sha256="$(curl -sl "$url" | shasum -a 256 | awk '{print $1}')"
		version="$(echo "$tag" | sed 's/^v//')"
		class_name="$(_pascal_case "$name")"
	fi

	export class_name description homepage name sha256 url version

	. "$MKBREWREL_LIB_DIR/mo"

	if [ -z "$TEMPLATE" ]; then
		_template | mo
	else
		[ ! -f "$TEMPLATE" ] \
			&& _fatal $E_NOT_FOUND "Template file not found: $TEMPLATE"
		mo < "$TEMPLATE"
	fi
}

mkbrewrel_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	mkbrewrel_help
	exit $E_ARGS
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mkbrewrel_help
	exit $E_ARGS
}

_pascal_case() {
	_echo "$*" | perl -pe 's/(^|_)./uc($&)/ge;s/_//g'
}

_require() {
	missing_bin=0

	for bin in "$@"; do
		if ! which "$bin" > /dev/null 2>&1; then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]; then
		_fatal $E_MISSING_APP "One or more executables or apps are missing."
	fi
}

_template() {
	cat << TEMPLATE
class {{class_name}} < Formula
	desc "{{description}}"
	homepage "{{homepage}}"
	url "{{url}}"
	sha256 "{{sha256}}"
	version "{{version}}"
	license "{{license}}"

	def install
		bin.install "./{{name}}"
	end

	test do
		system "./{{name}}", "-v"
	end
end
TEMPLATE
}

mkbrewrel_main "$@"
