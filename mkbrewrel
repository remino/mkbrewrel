#!/bin/sh

VERSION='1.0.0'

mkbrewrel_main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17
	e_no_tag=18
	e_no_release=19

	scriptinv="$( basename "$0" )"
	scriptpath="$( readlink -f "$0" )"
	scriptname="$( basename "$scriptpath" )"

	while getopts hv opt
	do
		case $opt in
			h) cmd=help ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$cmd" ] && cmd="process"

	case "$cmd" in
		help|process|version) "mkbrewrel_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

mkbrewrel_help() {
cat <<USAGE
$scriptname $VERSION

USAGE: $scriptinv [<options>] [<tag>]

Create release on GitHub and get information needed for Homebrew formula.

Uses latest version tag by default (e.g. v1.2.3) or the one specified.

OPTIONS:

	-h        Show this help screen.
	-v        Show script name and version number.

USAGE
}

mkbrewrel_process() {
	_require curl jq gh git

	tag="$1"
	[ -z "$tag" ] && tag="$( git tag | sort -V | tail -1 )"
	[ -z "$tag" ] && _fail $e_no_tag "No tag found."

	gh release create "$tag" --title "$tag" --generate-notes
	result=$?
	[ $result -ne 0 ] && _fail $e_no_release "Failed to create release."

	description="$( gh repo view --json description | jq -r .description )"
	homepage="$( gh repo view --json url | jq -r .url )"
	sha256="$( curl -sL "$url" | shasum -a 256 | awk '{print $1}' )"
	title="$scriptname"
	url="$( gh release view "$tag" --json tarballUrl | jq -r .tarballUrl )"
	version="$tag"
	classname="$( _pascal_case "$title" )"

cat <<FORMULA
class $classname < Formula
	desc "$description"
	homepage "$homepage"
	url "$url"
	sha256 "$sha256"
	version "$version"
end
FORMULA
}

mkbrewrel_version() {
	_echo "$scriptname $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	mkbrewrel_help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mkbrewrel_help
	exit $e_args
}

_pascal_case() {
	_echo "$*" | perl -pe 's/(^|_)./uc($&)/ge;s/_//g'
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal $e_missing_app "One or more executables or apps are missing."
	fi
}

mkbrewrel_main "$@"
